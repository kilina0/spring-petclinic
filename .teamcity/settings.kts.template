// TeamCity Kotlin DSL Template for Spring PetClinic
// This is a template file that can be used as a reference for creating a TeamCity Kotlin DSL configuration

// Note: This is a template file and not a directly usable Kotlin DSL file.
// You will need to copy this content to a proper settings.kts file in a TeamCity project.

// When using this template in TeamCity:
// 1. Remove the ".template" extension
// 2. Make sure TeamCity has the proper DSL context to resolve the imports

/*
 * Spring PetClinic TeamCity Build Configuration
 * 
 * This configuration sets up a build pipeline for the Spring PetClinic application
 * using Maven for building and testing.
 */

// Import statements for TeamCity Kotlin DSL
import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.perfmon
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.maven
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.vcs
import jetbrains.buildServer.configs.kotlin.v2019_2.vcs.GitVcsRoot

// Version of the TeamCity Kotlin DSL
version = "2023.11"

// Project definition
project {
    // Project details
    uuid = "SpringPetClinic"
    id("SpringPetClinic")
    name = "Spring PetClinic"
    description = "Spring PetClinic Sample Application"

    // VCS Root configuration
    val vcsRoot = GitVcsRoot {
        id("SpringPetClinicVcs")
        name = "spring-petclinic git repository"
        url = "https://github.com/spring-projects/spring-petclinic.git"
        branch = "refs/heads/main"
        branchSpec = "+:refs/heads/*"
    }
    vcsRoot(vcsRoot)

    // Main build configuration
    buildType {
        id("SpringPetClinicBuild")
        name = "Build and Test"

        vcs {
            root(vcsRoot)
        }

        // Build steps
        steps {
            // Step 1: Compile CSS
            maven {
                name = "Compile CSS"
                goals = "package"
                runnerArgs = "-P css -DskipTests"
                mavenVersion = auto()
                jdkHome = "%env.JDK_17_HOME%"
            }

            // Step 2: Compile and run tests
            maven {
                name = "Compile and Test"
                goals = "clean verify"
                runnerArgs = "-Dmaven.test.failure.ignore=true"
                mavenVersion = auto()
                jdkHome = "%env.JDK_17_HOME%"
            }

            // Step 3: Package application
            maven {
                name = "Package Application"
                goals = "package"
                runnerArgs = "-DskipTests"
                mavenVersion = auto()
                jdkHome = "%env.JDK_17_HOME%"
            }
        }

        // Triggers
        triggers {
            vcs {
                branchFilter = "+:*"
            }
        }

        // Features
        features {
            perfmon {}
        }

        // Artifact rules
        artifactRules = """
            target/*.jar => build
            target/site/jacoco => coverage-report
        """.trimIndent()

        // Requirements
        requirements {
            exists("env.JDK_17_HOME")
        }
    }

    // Optional: Database Integration Tests Configuration
    buildType {
        id("SpringPetClinicMySQLTests")
        name = "MySQL Integration Tests"
        
        vcs {
            root(vcsRoot)
        }
        
        steps {
            maven {
                name = "Run MySQL Integration Tests"
                goals = "verify"
                runnerArgs = "-P mysql"
                mavenVersion = auto()
                jdkHome = "%env.JDK_17_HOME%"
            }
        }
        
        // This build will run after the main build completes successfully
        triggers {
            finishBuildTrigger {
                buildType = "${BuildTypeId("SpringPetClinicBuild")}"
                successfulOnly = true
            }
        }
        
        artifactRules = "target/failsafe-reports => integration-test-reports"
    }

    // Optional: Docker Image Build Configuration
    buildType {
        id("SpringPetClinicDockerBuild")
        name = "Build Docker Image"
        
        vcs {
            root(vcsRoot)
        }
        
        steps {
            maven {
                name = "Build Docker Image"
                goals = "spring-boot:build-image"
                runnerArgs = "-DskipTests"
                mavenVersion = auto()
                jdkHome = "%env.JDK_17_HOME%"
            }
        }
        
        // This build will run after the main build completes successfully
        triggers {
            finishBuildTrigger {
                buildType = "${BuildTypeId("SpringPetClinicBuild")}"
                successfulOnly = true
            }
        }
    }
}
